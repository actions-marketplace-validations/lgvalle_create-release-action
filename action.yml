name: 'Create Release'
description: 'Create a new release listing all commits since the previous one when a branch is merged'
inputs:
  BRANCH_NAME_PREFIX:
    description: 'Branch name prefix which should trigger the action'
    required: true
    default: 'release/'
  OPENAI_API_KEY:
    description: 'Your own OpenAI API key'
    required: false

runs:      
  using: "composite"
  steps:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, ${{ inputs.BRANCH_NAME_PREFIX }}) && github.event.pull_request.merged == false
    steps:
      - uses: actions/checkout@v3

      - name: Get Previous Release Tag
        id: get_previous_release_tag
        run: |
          git fetch origin
          previous_tag=$(git describe --tags --abbrev=0 --first-parent $(git rev-list --tags --max-count=1))
          echo "PREVIOUS_TAG=$previous_tag" >> "$GITHUB_OUTPUT"

      - name: Create Commit Log
        id: create_commit_log
        env:
          PREVIOUS_TAG: ${{ steps.get_previous_release_tag.outputs.PREVIOUS_TAG }}
        run: |
          commit_log=$(git log $PREVIOUS_TAG..${{ github.event.pull_request.head.sha }} --pretty=format:"%h - %an - %ad - %s" --date=default | jq -s -R -r @json)
          echo "COMMIT_LOG=$commit_log" >> "$GITHUB_OUTPUT"

      - run: pip install openai
      - name: Summarise Commit Log
        id: summarise_commit_log
        env:
          COMMIT_LOG: ${{ steps.create_commit_log.outputs.COMMIT_LOG }}
          OPENAI_API_KEY: ${{ inputs.OPENAI_API_KEY }}
        run: |
          summary=$(python ./src/query_openai.py --changelog "$COMMIT_LOG" --api-key $OPENAI_API_KEY)
          echo "LOG_SUMMARY=$summary" >> "$GITHUB_OUTPUT"

      - name: Create release body
        id: create_release_body
        env:
          COMMIT_LOG: ${{ steps.create_commit_log.outputs.COMMIT_LOG }}
          LOG_SUMMARY: ${{ steps.summarise_commit_log.outputs.LOG_SUMMARY }}
        run: |
          # Remove quotes to prevent malformed JSON
          COMMIT_LOG=$(echo "$COMMIT_LOG" | sed 's/^"\(.*\)"$/\1/')


          body="$LOG_SUMMARY\n\n$COMMIT_LOG"
          echo "Release body $body"
          echo "RELEASE_BODY=$body" >> "$GITHUB_OUTPUT"

      - name: Create release
        id: create_release
        env:
          RELEASE_BODY: ${{ steps.create_release_body.outputs.RELEASE_BODY }}
        run: |
          # Create a JSON payload using a heredoc
          JSON_PAYLOAD=$(cat <<EOF
          {
            "tag_name": "${{ github.head_ref }}",
            "name": "${{ github.head_ref }}",
            "body": "$RELEASE_BODY",
            "draft": false,
            "prerelease": false,
            "generate_release_notes": false
          }
          EOF
          )

          echo "JSON PAYLOAD $JSON_PAYLOAD"

          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
              -d "$JSON_PAYLOAD"